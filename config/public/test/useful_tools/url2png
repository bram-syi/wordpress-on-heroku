#!/usr/bin/php
<?php

# http://staging.url2png.com/docs/v6.php
# usage
# $options['force']     = 'false';      # [false,always,timestamp] Default: false
# $options['fullpage']  = 'false';      # [true,false] Default: false
# $options['thumbnail_max_width'] = 'false';      # scaled image width in pixels; Default no-scaling.
# $options['viewport']  = "1280x1024";  # Max 5000x5000; Default 1280x1024

function url2png_v6($url, $args=array()) {
  $URL2PNG_APIKEY = "P4FA9FEB7E15C2";
  $URL2PNG_SECRET = "S8626E98DF37F9";

  # urlencode request target
  $options['url'] = urlencode($url);

  foreach ($args as $k => $v) {
    if (in_array($k, array('force', 'fullpage', 'thumbnail_max_width', 'viewport'))) {
      if (!$v) die("value for '$k' is not defined\n");
      $options[$k] = $v;
    }
  }

  # create the query string based on the options
  foreach($options as $key => $value) { $_parts[] = "$key=$value"; }

  # create a token from the ENTIRE query string
  $query_string = implode("&", $_parts);
  $TOKEN = md5($query_string . $URL2PNG_SECRET);

  return "http://beta.url2png.com/v6/$URL2PNG_APIKEY/$TOKEN/png/?$query_string";
}

array_shift($argv);

if (count($argv) == 0 || in_array('--help', $argv)) {
  print <<<EOS
This will call out to url2png to screenshot a url and dump the png to stdout
(so make sure to redirect it to a file).

Simple:
--url www.google.com

Print the url2png url instead of fetching:
--url www.google.com --fake

Set fullpage:
--url www.google.com --fullpage true

Other options are straight from url2png.com's help page:

['force']     = 'false';           # [false,always,timestamp] Default: false
['fullpage']  = 'false';           # [true,false] Default: false
['thumbnail_max_width'] = 'false'; # scaled image width in pixels; Default no-scaling.
['viewport']  = "1280x1024";       # Max 5000x5000; Default 1280x1024

EOS;
  exit;
}

while (count($argv) > 0) {
  $arg = array_shift($argv);
  if (preg_match('/^--(.*)/', $arg, $matches)) {
    if (!in_array($matches[1], array('fake'))) {
      if (count($argv) == 0) {
        die("$arg requires a value\n");
      }
      else {
        $opts[$matches[1]] = array_shift($argv);
      }
    }
    else {
      $opts[$matches[1]] = true;
    }
  }
  else {
    die("unrecognized argument: $arg\n");
  }
}

if (!array_key_exists('url', $opts) || !$opts['url']) {
  die("--url <url> is required\n");
}

$png = url2png_v6($opts['url'], $opts);

if (array_key_exists('fake', $opts)) {
    print "$png\n";
}
else {
    print shell_exec("curl -qs '$png'");
}
