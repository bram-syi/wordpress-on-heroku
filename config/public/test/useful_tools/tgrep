#!/usr/bin/env python

# search a log file with timestamps for a particular line, and then
# print that line along with the previous lines in a time span

import os
import re
import optparse
import sys
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + '/../useful_tools')
from syi import *

def main():
    usage = """%prog [options] [file1 [file2 ... ]]

 'tgrep' is short for "time grep".

 Search given files (or stdin if no files are given, or if a file is '-') for
 a particular regex. Lines in files are assumed to have timestamps. When the
 regex is found, print the hunk around (and including) the line. Similar to
 grep, use -A, -B, and -C to control the scope of the hunk.

 If no regex is given, split the lines into hunks of "--context" seconds."""

    global opts
    parser = optparse.OptionParser(usage)
    parser.add_option('--regex', '-r', metavar="EXPR",
        help="The regex to match each line against")
    parser.add_option('--ignore-case', '-i', action="store_true",
        help="When matching with --regex, ignore case")
    parser.add_option('--before', '-B', metavar="N", type="int", default=1,
        help="The number of seconds before to include when --regex matches (default:1)")
    parser.add_option('--after', '-A', metavar="N", type="int", default=1,
        help="The following number of seconds to include when --regex matches (default:1)")
    parser.add_option('--context', '-C', metavar="N", type="int",
        help="Set --before and --after at the same time")
    parser.add_option('--raw-stamps', action="store_true",
        help="Do not clean timestamps up (standardize format and use local timezone)")
    parser.add_option('--count', '-c', action="store_true",
        help="Instead of printing hunks, print a count of them")
    short_lines_option(parser)
    (opts, args) = parser.parse_args()

    if opts.context is not None:
        opts.before = opts.context
        opts.after = opts.context

    if opts.regex:
        re_opts = 0
        if opts.ignore_case:
            re_opts |= re.IGNORECASE
        opts.regex = re.compile(opts.regex, re_opts)

    count = 0
    if args:
        for filename in args:
            if filename == '-':
                f = sys.stdin
            else:
                f = open(filename, 'r')
            count += search_file(f)
    else:
        count += search_file(sys.stdin)

    if opts.count:
        print count

def dump_buf(buf):
    if not opts.count:
        for b in buf:
            line = b[1].rstrip()
            if opts.short_lines:
                line = shorten_line(line)
            print line
        print '---'
    return 1

def search_file(fh):
    # each buf is a list: [time_of_line, line], which we call a "hunk"
    buf = []

    # number of hunks we have found
    count = 0

    # if opts.regex:
    #   this is set to the time of the current hunk's matching event
    # else:
    #   this is set when the line is opts.before seconds after the oldest
    #   line in the hunk
    matching = -1

    for line in fh:
        this_time = get_time(line)
        if not opts.raw_stamps:
            line = get_time(line, do_cleanup=True)

        if matching >= 0:
            # we compare this line's time with the matching line in the hunk
            if this_time > 0 and abs(this_time - matching) > opts.after:
                count += dump_buf(buf)
                buf = []
                matching = -1

        if this_time > 0:
            if opts.regex:
                if re.search(opts.regex, line):
                    matching = this_time
                else:
                    # if this line doesn't match, throw out lines older than
                    # opts.before
                    while len(buf) and abs(this_time - buf[0][0]) > opts.before:
                        buf.pop(0)
            else:
                # if we are not using --regex, then we "match" when the oldest
                # line in the current hunk is older than --before
                if len(buf) and abs(this_time - buf[0][0]) > opts.before:
                    # if this line is within the current hunk, set matching
                    # and go on to the next line. otherwise, immediately dump
                    # this hunk and start a new one.
                    if len(buf) and abs(this_time - buf[-1][0]) <= opts.after:
                        matching = this_time
                    else:
                        count += dump_buf(buf)
                        buf = []

            buf.append([this_time,line])
        else:
            if len(buf) == 0:
                # this only happens when we get input that has lines without a
                # a timestamp in the beginning, which is pretty rare
                buf.append([0, ''])

            buf[-1][1] += line

    if len(buf) and not opts.regex:
        count += dump_buf(buf)

    return count

if __name__ == '__main__': main()
